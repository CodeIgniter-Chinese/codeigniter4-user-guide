##############################
CodeIgniter本质概述
##############################


 Codeigniter 引导应该帮助贡献者懂得核心框架的工作原理，而且当新的功能创建时所有必须的需求都要完成。
 明确的说，为核心创建新程序包的细节信息是必要的。

附属代码
============

来自剩余部分程序包的一切应当被完整的隔离设计。这个习惯将允许他们被使用在 codeigniter 外的项目里。上面所述主要的意思是所有的附属代码应该保持最小量。任何附属代码必须能被允许加入到构造程序里。如果你需要使用其他核心程序包中的一个，你可以使用服务类数据结构在构造程序里创建新的程序包，只要你为附属代码提供像下面代码一样的撤消方式::

	public function __construct(Foo $foo=null)
	{
		$this->foo = $foo instanceOf Foo
			? $foo
			: \Config\Services::foo();
	}

典型提示
============

PHP7 提供可能的 `type hint <http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_ 方法参数和返回类型。任何编码位置将会用到它。返回提示类型不是一直实际有效的，但要多尝试去使程序可以工作。

同时，我们将不使用绝对的典型提示。

抽象术语
============


最小限度的抽象术语数量要求去使解决方案生效。每一层抽象术语会带来额外层次的技术义务和不必要的复杂性。即便如此，当真的需要它或者它能产生帮助处理事情时不要反感使用它。

* 当一个数组恰好合适时不要创建一个新的容器类。

* 起始简单，必要的重构以达到清理代码分离，但不要做的夸张。

测试
=======

被提交到框架的任何新程序包必定会随着单元测试发生。目标涵盖程序包内全部类的80%范围。

* 测试仅有的公共方法，而不是保护的方法和私有的方法除非方法因为它的复杂性真的需要。

* 不要仅仅测试代码有条理的行为，而为了所有代码失效的状况，被抛出的例外，还有贯穿你的编码的其他不可预知的路径方向去测试。

命名空间和文件
====================

所有新的程序包应该存在于 ``CodeIgniter`` 命名空间下。程序包需要他自己的次要命名空间以收集所有的有关联的文件到一个集群里，如同 ``CodeIgniter\HTTP``.

文件的命名必须与他们支持的类相同，并且他们必须与 :doc:`Style Guide <styleguide>` 相配，意思是驼峰式大小写命名规则类和文件名。它们应当在他们自己的磁盘目录里与在 **system** 磁盘目录里次要命名空间相配。

路由模块是实例。路由存在于 ``CodeIgniter\Router`` 命名空间。它有两个类，**RouteCollection** 和 **Router**，
它们分别的放在文件 **system/Router/RouteCollection.php** 和 **system/Router/Router.php** 里。

接口
----------

大部分基础类应当有一个接口被定义。除了破坏典型提示的附属代码的其他类里最起码这将允许他们被简单的模仿和采纳。接口的名字应当对阶添加带有 "Interface" 类的名字，如同 ``RouteCollectionInterface``.

路由程序包提示以上的信息包含在  ``CodeIgniter\Router\RouterCollectionInterface`` 和 ``CodeIgniter\Router\RouterInterface`` 接口里并在程序包里为两个类提供抽象术语。

处理程序
--------

当一个程序包支持多重 “驱动器” ，协定会放置它们在 **Handlers** 的存储磁盘中，并且以处理程序来命名子类。在维持编码一个规则，实现一次的基本原则中你将常常能发现创建 ``BaseHandler`` 子类能是能延续益处的。

至于示例要去查看日志和权限程序包。


配置
=============

程序包要有使用者配置设定，你应该在 **application/Config** 下为程序包创建一个新文件。文件名通常要与程序包的名字相配。

自动装载程序
=============

包含程序包在内所有文件应该被添加进 **system/Config/AutoloadConfig.php** ，它们在 "classmap" 属性里可查。自动加载仅仅使用于核心框架文件，并且帮助将文件系统浏览减少到最小且能维持系统性能的品质。

命令行支持
====================

CodeIgniter 从来不是因加强支持通用语言运行库而知名。然而，要是你的程序包能从中受益，要在 **system/Commands** 下创建一个新的文件。对于通用语言运行库的专门用法有意的包含在一个简单的类控制器里。以程序包为条件的 ``index()`` 方法应该提供一个有用的命令列表。

路由必须被添加到正使用 ``cli()`` 方法的 **system/Config/Routes.php** 中以确保通过浏览器时不受影响，但它对于通用语言运行库是被受限制的。

实例要查看系统 **MigrationsCommand** 文件。

文件
=============

所有的程序包必须包含相称的文件以与剩余的用户指引格调和风格相配。在大多数情况下，在流行的教学软件里软件包页面的主要部分应该被阐述，同时不到一半的次要部分将被作为一种类结构的参考。
