################
网页缓存
################

CodeIgniter 让你可以缓存页面以达到最大的性能。

尽管 CodeIgniter 非常快,你在页面中显示的动态信息量将直接对应于所利用的服务器资源、内存和处理周期,这会影响你的页面加载速度。通过缓存页面,由于它们以完全渲染的状态保存,所以你可以达到更接近静态网页的性能。

.. contents::
    :local:
    :depth: 2

缓存是如何工作的?
=====================

缓存可以在每个页面的基础上启用,你可以设置页面保持缓存的时间长度,之后会刷新。当一个页面第一次加载时,页面将使用当前配置的缓存引擎进行缓存。在后续的页面加载中,缓存将被检索并发送给请求用户的浏览器。如果已过期,它将被删除并在发送到浏览器之前刷新。

.. note:: Benchmark 标签不会被缓存,所以你仍然可以查看启用缓存后的页面加载速度。

配置缓存
===================

设置缓存引擎
--------------------

在使用网页缓存之前,你必须通过编辑 **app/Config/Cache.php** 来设置缓存引擎。详情参见 :ref:`libraries-caching-configuring-the-cache`。

设置 $cacheQueryString
-------------------------

你可以通过 ``Config\Cache::$cacheQueryString`` 设置是否在生成缓存时包含查询字符串。

有效的选项是:

- ``false``: (默认)禁用。不考虑查询字符串;对于具有相同 URI 路径但不同查询字符串的请求返回相同的缓存。
- ``true``: 启用,考虑所有查询参数。要注意这可能会导致同一页面一次又一次地生成大量缓存。
- **array**: 启用,但只考虑指定的查询参数列表。例如,``['q', 'page']``。

启用缓存
===============

要启用缓存,请在任何控制器方法中放入以下标记:

.. literalinclude:: caching/001.php

其中 ``$n`` 是页面在刷新之间保持缓存的秒数。

上述标记可以放在方法中的任何位置。它不受显示顺序的影响,所以请根据你认为最合乎逻辑的方式放置它。一旦放置了标记,你的页面将开始被缓存。

.. important:: 如果你更改了可能影响输出的配置选项,你必须手动删除缓存。

删除缓存
===============

如果你不再希望缓存页面,可以删除缓存标记,它将不再在过期时刷新。

.. note:: 删除标记不会立即删除缓存。它必须过期后才会正常删除。
